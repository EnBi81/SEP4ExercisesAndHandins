man {command} // describes a command
ls // list directory content
ls -l // detailed list of content
mkdir // create directory
cd // navigate in directories
sudo apt install {package} // install app
pwd // print working directory
chmod u=rwx,g=rwx,o=rwx {file} // changing permission
chmod +x {file} // making file executable
ln -s {folder1} {folder2} // alias a folder (make a shortcut)
which {command} // returns the location of the command
set // check the environment variables (usually better with 'set | less' and navigate with space and 'b')
export (-n) MYVAR // add (or remove) the MYVAR env variable from export
micro // text editor
micro {filename} // open file using micro (or create a new one)
sudo apt install build-essential // install c compiler
gcc {file.c} // compile c code
curl {website} // make web request to the website
env // get environment variables
weather // get weather forecast 'this is a custom script, ask me to get it'
neofetch // display system info
cat {file} // display file content in the terminal console
less {file} // display a file's content in a new console window
sort {file} // sorts a file's content (by line)
command1 | command2 // connect command1 stdout into command2 stdin (example: sort {file} | less)
command1 > {file} // stdout to file
command1 >> {file} // stdout append to file
command1 < {file} // file goes into stdin
uniq {file} // get unique values from file
sort {file} | uniq | less // sort a file content, get the uniq values, and look at the result in less
wc -l {file} // counts lines in a file
unzip {file.zip} // unzip a zip file 
ps // get all the running processes
cmatrix // this is a really cool app, but first install it via 'sudo apt add cmatrix'
bash // start a new bash shell (the local variables won't be visible) (press control+d to exit)
sl // cool shushuuuuuu

docker container ls // list all the containers
docker create -i -t --name {containerName} alpine // create a new interactive docker container
docker start -i {containerName} // start a new container (type exit to exit) (-i => interactive start, we will redirected to the container's bash)
docker container rm {containerName} // delete a container 
docker volume create {name} // create a volume
docker run -it -v {volumeName}:/{folderName} --name {containerName} ubuntu bash // create and start container in an ubuntu environment, and attach the already existing volume as a folder to the container
docker exec {containerName} {command} // executes a single command in the container (the container must be running) (e.g. docker exec cont1 ls)
docker build -t {imageName} . // builds a new image from a Dockerfile (looking in the current directory because of the . at the end)
docker run -it --rm {imageName} // creates and runs a container from the image (--rmm automatically deletes the container when exit)
docker run -p 8888:80 --rm {imageName} // runs a container and remaps the port 80 to 8888, so from the outside the 8888 is the access port